# variables:
#   IMAGE_NAME_WORDPRESS: wordpress
#   IMAGE_TAG_WORDPRESS: latest
#   IMAGE_NAME_DB: mysql
#   IMAGE_TAG_DB: latest
#   IMAGE_NAME_PHPADMIN: phpmyadmin
#   IMAGE_TAG_PHPADMIN: latest

# stages:
#   - build
#   - deploy

# build:
#   stage: build
#   before_script:
#     - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY
#   script:
#     - docker-compose build
#     # Tag and push db image
#     - docker tag wordpress-$IMAGE_NAME_WORDPRESS $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS
#     - docker push $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS
#     - docker tag wordpress-$IMAGE_NAME_DB $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB
#     - docker push $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB
#     - docker tag wordpress-$IMAGE_NAME_PHPADMIN $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN
#     - docker push $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN
#     - docker image rm -f ${IMAGE_NAME_WORDPRESS}
#     - docker image rm -f ${IMAGE_NAME_DB}
#     - docker image rm -f ${IMAGE_NAME_PHPADMIN}
#   only:
#     - staging

# deploy:
#   stage: deploy
#   script:
#     - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY
#     - docker pull $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS
#     - docker run -dp 80:80 $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS
#     - docker pull $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB
#     - docker run -d -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress -e MYSQL_USER=root -e MYSQL_PASSWORD=password $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB
#     - docker pull $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN
#     - docker run -dp 8080:80 $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN
#   only:
#     - staging





variables:
  IMAGE_NAME_WORDPRESS: wordpress
  IMAGE_TAG_WORDPRESS: latest
  IMAGE_NAME_DB: mysql
  IMAGE_TAG_DB: latest
  IMAGE_NAME_PHPADMIN: phpmyadmin
  IMAGE_TAG_PHPADMIN: latest
  IMAGE_NAME_WPCLI: wpcli
  IMAGE_TAG_WPCLI: latest
  IMAGE_NAME_HEALTHCHECK: healthcheck
  IMAGE_TAG_HEALTH: latest

stages:
  - build
  - deploy

before_script:
  # Load variables from .env file in ubuntu
  # - export $(grep -v '^#' .env | xargs)
  # Load variables from .env file in windows
  # - powershell -Command "& {Get-Content .env | ForEach-Object {if ($_ -match '^\s*([^#].*?)\s*=\s*(.*)\s*$') {Set-Item -Path Env:$($matches[1]) -Value $matches[2]}}}"

# build:
#   stage: build
#   before_script:
#     - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY
#   script:
#     - docker-compose build --parallel
#     # Tag and push db image
#     - docker tag wordpress_$IMAGE_NAME_WORDPRESS $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS
#     - docker push $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS
#     - docker tag wordpress_$IMAGE_NAME_DB $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB
#     - docker push $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB
#     - docker tag wordpress_$IMAGE_NAME_PHPADMIN $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN
#     - docker push $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN
#     - docker tag $IMAGE_NAME_WPCLI $CI_REGISTRY/${IMAGE_NAME_WPCLI}:$IMAGE_TAG_WPCLI
#     - docker push $CI_REGISTRY/${IMAGE_NAME_WPCLI}:$IMAGE_TAG_WPCLI
#     - docker image rm -f ${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS || true
#     - docker image rm -f ${IMAGE_NAME_DB}:$IMAGE_TAG_DB || true
#     - docker image rm -f ${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN || true
#     - docker image rm -f ${IMAGE_NAME_WPCLI}:$IMAGE_TAG_WPCLI || true
#   only:
#     - staging

# deploy:
#   stage: deploy
#   script:
#     - ssh admin@$SERVER_TESTING " 
#       docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY &&
#       docker pull $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS &&
#       docker pull $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB &&
#       docker pull $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN &&
#       docker pull $CI_REGISTRY/${IMAGE_NAME_WPCLI}:$IMAGE_TAG_WPCLI &&
#       docker network create ${COMPOSE_PROJECT_NAME}_backend || true &&
#       docker run -d --network=${COMPOSE_PROJECT_NAME}_backend 
#       -e MYSQL_ROOT_PASSWORD=$DATABASE_PASSWORD -e MYSQL_USER=$DATABASE_USER 
#       -e MYSQL_PASSWORD=$DATABASE_PASSWORD 
#       -e MYSQL_DATABASE=$WORDPRESS_DB_NAME 
#       $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB &&
#       docker run -d --network=${COMPOSE_PROJECT_NAME}_backend 
#       -p 81:80 -v ./config/php.conf.ini:/usr/local/etc/php/conf.d/php.ini 
#       -v ./wordpress:/var/www/html -e WORDPRESS_DB_NAME=$COMPOSE_PROJECT_NAME 
#       -e WORDPRESS_TABLE_PREFIX=_wp -e WORDPRESS_DB_HOST=mysql 
#       -e WORDPRESS_DB_USER=$DATABASE_USER 
#       -e WORDPRESS_DB_PASSWORD=$DATABASE_PASSWORD 
#       $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS &&
#       docker run -d --network=${COMPOSE_PROJECT_NAME}_backend 
#       -p $PHPMYADMIN_PORT:80 -e PMA_HOST=mysql 
#       -e MYSQL_ROOT_PASSWORD=$DATABASE_PASSWORD 
#       $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN &&
#       docker run -d --network=${COMPOSE_PROJECT_NAME}_backend 
#       -v ${WORDPRESS_DATA_DIR:-./wordpress}:/var/www/html 
#       -w /var/www/html 
#       -e WAIT_HOSTS=mysql:3306,wordpress:80 
#       -e WAIT_BEFORE_HOSTS=${WAIT_BEFORE_HOSTS:-30} 
#       -e WAIT_AFTER_HOSTS=${WAIT_AFTER_HOSTS:-15} 
#       -e WAIT_HOSTS_TIMEOUT=${WAIT_HOSTS_TIMEOUT:-300} 
#       -e WAIT_SLEEP_INTERVAL=${WAIT_SLEEP_INTERVAL:-30} 
#       -e WAIT_HOST_CONNECT_TIMEOUT=${WAIT_HOST_CONNECT_TIMEOUT:-30} 
#       $CI_REGISTRY/${IMAGE_NAME_WPCLI}:$IMAGE_TAG_WPCLI "
#   only:
#     - staging


# stages:
#   - build
#   - deploy

# build:
#   stage: build
#   before_script:
#     - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY
#   script:
#     - docker-compose build --parallel
#     - docker-compose push
#     - docker image rm -f ${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS || true
#     - docker image rm -f ${IMAGE_NAME_DB}:$IMAGE_TAG_DB || true
#     - docker image rm -f ${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN || true
#     - docker image rm -f ${IMAGE_NAME_WPCLI}:$IMAGE_TAG_WPCLI || true
#   only:
#     - staging

# deploy:
#   stage: deploy
#   script:
#     - ssh user-deploy@$SERVER_TESTING "
#       cd /path/to/your/wordpress-docker-compose &&
#       docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY &&
#       docker-compose pull &&
#       docker-compose up -d "
    
#     # - |
#     #   for port in 8080 80; do
#     #     CONTAINER_IDS=$(docker ps -q --filter "publish=$port")
#     #     if [ ! -z "$CONTAINER_IDS" ]; then
#     #       for id in $CONTAINER_IDS; do
#     #         docker stop $id && docker rm $id
#     #       done
#     #     fi
#     #   done
    
#   only:
#     - staging


build:
  stage: build
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY
  script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY
    - docker build -t $IMAGE_NAME_WORDPRESS:$IMAGE_TAG_WORDPRESS -f Dockerfile.wb .
    - docker image tag $IMAGE_NAME_WORDPRESS:$IMAGE_TAG_WORDPRESS $CI_REGISTRY/$IMAGE_NAME_WORDPRESS:$IMAGE_TAG_WORDPRESS
    - docker push $CI_REGISTRY/$IMAGE_NAME_WORDPRESS:$IMAGE_TAG_WORDPRESS
    - docker image rm -f $IMAGE_NAME_WORDPRESS:$IMAGE_TAG_WORDPRESS
    - docker build -t $IMAGE_NAME_DB:$IMAGE_TAG_DB -f Dockerfile.db .
    - docker image tag $IMAGE_NAME_DB:$IMAGE_TAG_DB $CI_REGISTRY/$IMAGE_NAME_DB:$IMAGE_TAG_DB
    - docker push $CI_REGISTRY/$IMAGE_NAME_DB:$IMAGE_TAG_DB
    - docker image rm -f $IMAGE_NAME_DB:$IMAGE_TAG_DB
    - docker build -t $IMAGE_NAME_PHPADMIN:$IMAGE_TAG_PHPADMIN -f Dockerfile.phpAdmin .
    - docker image tag $IMAGE_NAME_PHPADMIN:$IMAGE_TAG_PHPADMIN $CI_REGISTRY/$IMAGE_NAME_PHPADMIN:$IMAGE_TAG_PHPADMIN
    - docker push $CI_REGISTRY/$IMAGE_NAME_PHPADMIN:$IMAGE_TAG_PHPADMIN
    - docker image rm -f $IMAGE_NAME_PHPADMIN:$IMAGE_TAG_PHPADMIN
  only:
    - staging

deploy:
  stage: deploy
  script:
    - ssh user-deploy@$SERVER_TESTING " docker login -u $REGISTRY_USER -p $REGISTRY_PASS $CI_REGISTRY &&
      docker pull $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS &&
      docker pull $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB &&
      docker pull $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN && docker network create ${COMPOSE_PROJECT_NAME}_backend || true &&
      docker run -d --network=${COMPOSE_PROJECT_NAME}_backend $CI_REGISTRY/${IMAGE_NAME_DB}:$IMAGE_TAG_DB &&
      docker run -d --network=${COMPOSE_PROJECT_NAME}_backend -p 81:80 $CI_REGISTRY/${IMAGE_NAME_WORDPRESS}:$IMAGE_TAG_WORDPRESS &&
      docker run -d --network=${COMPOSE_PROJECT_NAME}_backend -p $PHPMYADMIN_PORT:80 $CI_REGISTRY/${IMAGE_NAME_PHPADMIN}:$IMAGE_TAG_PHPADMIN "
  only:
    - staging